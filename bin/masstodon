# -*- coding: utf-8 -*-
#   Copyright (C) 2016 Mateusz Krzysztof Łącki and Michał Startek.
#
#   This file is part of MassTodon.
#
# License: see LICENCE file.


import argparse
import json
import os
from pprint import pprint
import re



# from MassTodonPy.CLI.AdditionalParsers import add_max_times_parsing
# from MassTodonPy.CLI.AdditionalParsers import add_output_parsing
# from MassTodonPy.CLI.AdditionalParsers import add_spectra_plots_parsing
# from MassTodonPy.CLI.AdditionalParsers import add_verbosity_parsing
# from MassTodonPy.CLI.MassTodon_wrapper import run_masstodon
# from MassTodonPy.Data.Constants import eps
# from MassTodonPy.MassTodon import MassTodon
# from MassTodonPy.Parsers.blocked_fragments import parse_blocked_fragments
# from MassTodonPy.Parsers.Paths import parse_path


p = argparse.Argumentp()
p.add_argument("spectrum",
    help="path to the spectrum file, with spectrum file extension: either '.txt', '.mzxml', or '.mzml', case insensitive.")
add_output_parsing(p)

p.add_argument("fasta",
                    help="The FASTA sequence of the protein to study.")
p.add_argument("charge",
                    type=int,
                    help="The initial charge of the precursor filtered out in MS1.")
p.add_argument("mz_tol",
                    type=float,
                    help="The tolerance in the m/z axis.")
p.add_argument("-name",
                    help="The precursor's name.",
                    default='')

# what a terrible example of copy-paste. Write as dicts, call.
p.add_argument("-modifications",
                    help="String with modifications of individual amino acids.\n\
                    Follows the scheme: '<amino acid number> <C_alpha|C_carbo|N> <element>=<integer difference> .. <element>=<integer difference> | ...'.\
                    For example: '11 C_carbo H=-1 N=1 O=-1|10 C_carbo H=-1 N=1 O=-10'",
                    type=modification)
p.add_argument("-fragments",
                    help="Only 'cz' accepted for now. Planning other fragmentation schemes, including inner fragments.",
                    default='cz')
p.add_argument("-blocked_fragments",
                    help="Fragments you don't want to include, e.g. 'z5', or 'c13z21c12c53z1': no spaces between diffferent names.",
                    type=parse_blocked_fragments,
                    default='c0')
p.add_argument("--unblock_prolines",
                    dest='block_prolines',
                    action='store_const',
                    const=False,
                    default=True,
                    help="Stop blocking prolines from fragmenting.")
p.add_argument("-distance_charges",
                    help="The minimal distance between charges on the fasta sequence. Defaults to charges being 4 amino acids apart.",
                    type=int,
                    default=5)
p.add_argument("-min_intensity",
                    help="Experimental peaks with lower height will be trimmed.",
                    type=float,
                    default=eps)
p.add_argument("-percent_top_peaks",
                    help="Percentage of the heighest peaks in the spectrum to be included.",
                    type=float,
                    default=1.0)
p.add_argument("-deconvolution_method",
                    help="Matteo = MassTodon paper deconvolution. Ciacho_Wanda = experimental gaussian kernel deconvolution.",
                    default='Matteo')
p.add_argument("-joint_probability",
                    help="The joint probability of the calculated isotopic distribution. Defaults to a decent '0.999'.",
                    type=float,
                    default=.999)
p.add_argument("-min_prob_per_molecule",
                    help="The minimal probability an envelope has to scoop to be included in the deconvolution graph.",
                    type=float,
                    default=.7)
p.add_argument("-max_buffer_len",
                    dest='max_buffer_len',
                    help="The maximal length of the visual buffer between peaks, i.e. the big rectangle width.",
                    type=float,
                    default=.5)
p.add_argument("-L1_flow",
                    dest='_L1_flow',
                    help="L1 penalty for high flows of intensities.",
                    type=float,
                    default=.01)
p.add_argument("-L2_flow",
                    dest="_L1_flow",
                    help="L2 penalty (a.k.a. ridge regression like) for high flows of intensities.",
                    type=float,
                    default=.01)
p.add_argument("-L1_intensity",
                    dest="_L1_intensity",
                    help="L1 penalty for high intensity estimates.",
                    type=float,
                    default=.01)
p.add_argument("-L2_intensity",
                    dest="_L2_intensity",
                    help="L2 penalty (a.k.a. ridge regression like) for high intensities.",
                    type=float,
                    default=.01)
p.add_argument("--show_progress",
                    dest="show_progress",
                    action='store_const',
                    const=True,
                    default=False,
                    help="Show progress of the CVXOPT calculations.")
p.add_argument("-maxiters",
                    dest='_maxiters',
                    type=int,
                    help="Maximum number of steps for the CVXOPT algorithm.",
                    default=1000)
p.add_argument("-sigma2",
                    help="Variance of the experimental peak's m/z ratio.",
                    type=float,
                    default=.1)
p.add_argument("-ni2",
                    help="Variance of the theoretic isotopologue's m/z ratio.",
                    type=float,
                    default=.1)
add_spectra_plots_parsing(p)
add_verbosity_parsing(p)
add_max_times_parsing(p)

args = p.parse_args().__dict__ # parsing & making a dictionary
run_masstodon(args)
